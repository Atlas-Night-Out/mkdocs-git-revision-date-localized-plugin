{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mkdocs-git-revision-date-localized-plugin MkDocs plugin that enables displaying the date of the last git modification of a page. The plugin uses babel and timeago.js to provide different localized date formats. Initial fork from mkdocs-git-revision-date-plugin . ( Example when used together with the mkdocs-material theme ) Other MkDocs plugins that use information from git: mkdocs-git-authors-plugin for displaying the authors from git mkdocs-git-committers-plugin for displaying authors' github user profiles Setup Install the plugin using pip3 with the following command: pip3 install mkdocs-git-revision-date-localized-plugin Next, add the following lines to your mkdocs.yml : plugins : - search - git-revision-date-localized If you have no plugins entry in your config file yet, you'll likely also want to add the search plugin. MkDocs enables it by default if there is no plugins entry set. The mkdocs-material theme has built in support for git-revision-date-localized and you should already see the last revision date on the bottom of your pages. See the documentation on how to fine-tune the appearance and the date format. Note when using build environments This plugin needs access to the last commit that touched a specific file to be able to retrieve the date. By default many build environments only retrieve the last commit, which means you might need to: Change your CI settings github actions: set fetch-depth to 0 ( docs ) gitlab runners: set GIT_DEPTH to 0 ( docs ) bitbucket pipelines: set clone: depth: full ( docs ) Documentation See timvink.github.io/mkdocs-git-revision-date-localized-plugin . Contributing Contributions are very welcome! Please read CONTRIBUTING.md before putting in any work.","title":"Home"},{"location":"#mkdocs-git-revision-date-localized-plugin","text":"MkDocs plugin that enables displaying the date of the last git modification of a page. The plugin uses babel and timeago.js to provide different localized date formats. Initial fork from mkdocs-git-revision-date-plugin . ( Example when used together with the mkdocs-material theme ) Other MkDocs plugins that use information from git: mkdocs-git-authors-plugin for displaying the authors from git mkdocs-git-committers-plugin for displaying authors' github user profiles","title":"mkdocs-git-revision-date-localized-plugin"},{"location":"#setup","text":"Install the plugin using pip3 with the following command: pip3 install mkdocs-git-revision-date-localized-plugin Next, add the following lines to your mkdocs.yml : plugins : - search - git-revision-date-localized If you have no plugins entry in your config file yet, you'll likely also want to add the search plugin. MkDocs enables it by default if there is no plugins entry set. The mkdocs-material theme has built in support for git-revision-date-localized and you should already see the last revision date on the bottom of your pages. See the documentation on how to fine-tune the appearance and the date format.","title":"Setup"},{"location":"#note-when-using-build-environments","text":"This plugin needs access to the last commit that touched a specific file to be able to retrieve the date. By default many build environments only retrieve the last commit, which means you might need to: Change your CI settings github actions: set fetch-depth to 0 ( docs ) gitlab runners: set GIT_DEPTH to 0 ( docs ) bitbucket pipelines: set clone: depth: full ( docs )","title":"Note when using build environments"},{"location":"#documentation","text":"See timvink.github.io/mkdocs-git-revision-date-localized-plugin .","title":"Documentation"},{"location":"#contributing","text":"Contributions are very welcome! Please read CONTRIBUTING.md before putting in any work.","title":"Contributing"},{"location":"available-variables/","text":"Available variables This plugin offers the following variables: timestamp description git-revision-date-localized Last git commit that touched a file. Enabled by default. git-creation-date-localized First git commit that touched a file. Enable in options . git_site_revision_date_localized Last git commit that touched any file in the docs/ folder. Enabled by default. You can use these variables wrapped in curly brackets ( {{ and }} ) anywhere in a markdown file, like so: This page was last updated: *{{ git_revision_date_localized }}* Example output: This page was last updated 2021-12-03 . Changing the type , timezone and/or locale in the options will effect the output of these variables. To change the styling see Applying custom styling . Variables for overriding themes If you do not want to include revision dates manually in each markdown file, or if you would like more control on the formatting, you can override a theme . You can use the same three variables but with a page.meta. prefix: page.meta.git-revision-date-localized page.meta.git-creation-date-localized page.meta.git_revision_date_localized_raw_date To allow for more flexibility when overriding a theme there are also variables for each different type available (regardless of the setting for type in options ), where the output is also not wrapped in <span> elements (so you can do the CSS styling yourself): page.meta.git_revision_date_localized_raw_date page.meta.git_revision_date_localized_raw_datetime page.meta.git_revision_date_localized_raw_iso_date page.meta.git_revision_date_localized_raw_iso_datetime page.meta.git_revision_date_localized_raw_timeago page.meta.git_site_revision_date_localized_raw_datetime page.meta.git_site_revision_date_localized_raw_iso_date page.meta.git_site_revision_date_localized_raw_date page.meta.git_site_revision_date_localized_raw_iso_datetime page.meta.git_site_revision_date_localized_raw_timeago And if you've enable creation date in the config: page.meta.git_creation_date_localized_raw_date page.meta.git_creation_date_localized_raw_datetime page.meta.git_creation_date_localized_raw_iso_date page.meta.git_creation_date_localized_raw_iso_datetime page.meta.git_creation_date_localized_raw_timeago","title":"Available variables"},{"location":"available-variables/#available-variables","text":"This plugin offers the following variables: timestamp description git-revision-date-localized Last git commit that touched a file. Enabled by default. git-creation-date-localized First git commit that touched a file. Enable in options . git_site_revision_date_localized Last git commit that touched any file in the docs/ folder. Enabled by default. You can use these variables wrapped in curly brackets ( {{ and }} ) anywhere in a markdown file, like so: This page was last updated: *{{ git_revision_date_localized }}* Example output: This page was last updated 2021-12-03 . Changing the type , timezone and/or locale in the options will effect the output of these variables. To change the styling see Applying custom styling .","title":"Available variables"},{"location":"available-variables/#variables-for-overriding-themes","text":"If you do not want to include revision dates manually in each markdown file, or if you would like more control on the formatting, you can override a theme . You can use the same three variables but with a page.meta. prefix: page.meta.git-revision-date-localized page.meta.git-creation-date-localized page.meta.git_revision_date_localized_raw_date To allow for more flexibility when overriding a theme there are also variables for each different type available (regardless of the setting for type in options ), where the output is also not wrapped in <span> elements (so you can do the CSS styling yourself): page.meta.git_revision_date_localized_raw_date page.meta.git_revision_date_localized_raw_datetime page.meta.git_revision_date_localized_raw_iso_date page.meta.git_revision_date_localized_raw_iso_datetime page.meta.git_revision_date_localized_raw_timeago page.meta.git_site_revision_date_localized_raw_datetime page.meta.git_site_revision_date_localized_raw_iso_date page.meta.git_site_revision_date_localized_raw_date page.meta.git_site_revision_date_localized_raw_iso_datetime page.meta.git_site_revision_date_localized_raw_timeago And if you've enable creation date in the config: page.meta.git_creation_date_localized_raw_date page.meta.git_creation_date_localized_raw_datetime page.meta.git_creation_date_localized_raw_iso_date page.meta.git_creation_date_localized_raw_iso_datetime page.meta.git_creation_date_localized_raw_timeago","title":"Variables for overriding themes"},{"location":"options/","text":"Options You can customize the plugin by setting options in mkdocs.yml . For example: mkdocs.yml plugins : - git-revision-date-localized : type : timeago timezone : Europe/Amsterdam locale : en fallback_to_build_date : false enable_creation_date : true exclude : - index.md enabled : true type Default is date . The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago . Example outputs: November 28, 2019 # type: date (default) November 28, 2019 13:57:28 # type: datetime 2019-11-28 # type: iso_date 2019-11-28 13:57:26 # type: iso_datetime 20 hours ago # type: timeago timezone Default is UTC . Specify a time zone database name ( reference ). This option is especially relevant when using type: datetime and type: iso_datetime . Note that when using timeago (with type: timeago ) any difference in time zones between server and client will be handled automatically. locale Default is None . Specify a two letter ISO639 language code to display dates in your preferred language. When not set, this plugin will look for locale or language options set in your theme. If also not set, the fallback is English ( en ) When used in combination with type: date or type: datetime , translation is done using babel which supports these locales When used in combination with type: timeago then timeago.js is added to your website, which supports these locales . If you specify a locale not supported by timeago.js, the fallback is English ( en ) Example outputs: April 27, 2021 # `locale: en` with `type: date` (default) April 27, 2021 13:11:28 # `locale: en` with `type: datetime` 2 weeks ago # `locale: en` with `type: timeago` 27 de marzo de 2021 # `locale: es` with `type: date` 27 de marzo de 2021 13:57:28 # `locale: es` with `type: datetime` hace 2 semanas # `locale: es` with `type: timeago` fallback_to_build_date Default is false . Enables falling back to the time when mkdocs build was executed when git is not available . This means the revision date will be incorrect, but this can be acceptable if you want your project to also successfully build in environments with no access to GIT. enable_creation_date Default is false (because it has a small effect on build time). Enables a Created date variables, see [available-variables.md]. This will also add a created date at the bottom of each page in mkdocs-material as it has native support (see overriding a theme ). exclude Default is empty. Specify a list of page source paths (one per line) that should not have a revision date included (excluded from processing by this plugin). This can be useful for example to remove the revision date from the front page. The source path of a page is relative to your docs/ folder. You can also use globs instead of full source paths. To exclude docs/subfolder/page.md specify in your mkdocs.yml a line under exclude: with - subfolder/page.md . Some examples: mkdocs.yml plugins : - git-revision-date-localized : exclude : - index.md - subfolder/page.md - another_page.md - folder/* enabled Default is true . Enables you to deactivate this plugin. A possible use case is local development where you might want faster build times and/or do not have git available. It's recommended to use this option with an environment variable together with a default fallback (introduced in mkdocs v1.2.1, see docs ). Example: mkdocs.yml plugins : - git-revision-date-localized : enabled : !ENV [ ENABLED_GIT_REVISION_DATE , True ] Which enables you to disable the plugin locally using: export ENABLED_GIT_REVISION_DATE = false mkdocs serve","title":"Options"},{"location":"options/#options","text":"You can customize the plugin by setting options in mkdocs.yml . For example: mkdocs.yml plugins : - git-revision-date-localized : type : timeago timezone : Europe/Amsterdam locale : en fallback_to_build_date : false enable_creation_date : true exclude : - index.md enabled : true","title":"Options"},{"location":"options/#type","text":"Default is date . The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago . Example outputs: November 28, 2019 # type: date (default) November 28, 2019 13:57:28 # type: datetime 2019-11-28 # type: iso_date 2019-11-28 13:57:26 # type: iso_datetime 20 hours ago # type: timeago","title":"type"},{"location":"options/#timezone","text":"Default is UTC . Specify a time zone database name ( reference ). This option is especially relevant when using type: datetime and type: iso_datetime . Note that when using timeago (with type: timeago ) any difference in time zones between server and client will be handled automatically.","title":"timezone"},{"location":"options/#locale","text":"Default is None . Specify a two letter ISO639 language code to display dates in your preferred language. When not set, this plugin will look for locale or language options set in your theme. If also not set, the fallback is English ( en ) When used in combination with type: date or type: datetime , translation is done using babel which supports these locales When used in combination with type: timeago then timeago.js is added to your website, which supports these locales . If you specify a locale not supported by timeago.js, the fallback is English ( en ) Example outputs: April 27, 2021 # `locale: en` with `type: date` (default) April 27, 2021 13:11:28 # `locale: en` with `type: datetime` 2 weeks ago # `locale: en` with `type: timeago` 27 de marzo de 2021 # `locale: es` with `type: date` 27 de marzo de 2021 13:57:28 # `locale: es` with `type: datetime` hace 2 semanas # `locale: es` with `type: timeago`","title":"locale"},{"location":"options/#fallback_to_build_date","text":"Default is false . Enables falling back to the time when mkdocs build was executed when git is not available . This means the revision date will be incorrect, but this can be acceptable if you want your project to also successfully build in environments with no access to GIT.","title":"fallback_to_build_date"},{"location":"options/#enable_creation_date","text":"Default is false (because it has a small effect on build time). Enables a Created date variables, see [available-variables.md]. This will also add a created date at the bottom of each page in mkdocs-material as it has native support (see overriding a theme ).","title":"enable_creation_date"},{"location":"options/#exclude","text":"Default is empty. Specify a list of page source paths (one per line) that should not have a revision date included (excluded from processing by this plugin). This can be useful for example to remove the revision date from the front page. The source path of a page is relative to your docs/ folder. You can also use globs instead of full source paths. To exclude docs/subfolder/page.md specify in your mkdocs.yml a line under exclude: with - subfolder/page.md . Some examples: mkdocs.yml plugins : - git-revision-date-localized : exclude : - index.md - subfolder/page.md - another_page.md - folder/*","title":"exclude"},{"location":"options/#enabled","text":"Default is true . Enables you to deactivate this plugin. A possible use case is local development where you might want faster build times and/or do not have git available. It's recommended to use this option with an environment variable together with a default fallback (introduced in mkdocs v1.2.1, see docs ). Example: mkdocs.yml plugins : - git-revision-date-localized : enabled : !ENV [ ENABLED_GIT_REVISION_DATE , True ] Which enables you to disable the plugin locally using: export ENABLED_GIT_REVISION_DATE = false mkdocs serve","title":"enabled"},{"location":"howto/custom-styling/","text":"Apply custom styling You can change the appearance of the revision dates by including extra CSS to your mkdocs site. CSS Classes To allow for easier styling date outputs are wrapped in <span> elements with the classes git-revision-date-localized-plugin and git-revision-date-localized-plugin-{type} , where {type} is replaced with the type set in the plugin settings (see options ). For example when type: datetime is set, using the following in a markdown file: Last update: {{ git_revision_date_localized }} Could output the following HTML: Last update: <span class=\"git-revision-date-localized-plugin git-revision-date-localized-plugin-datetime\">28 November, 2019 13:57:28</span> Customizing a class Making all revision dates red is as easy as: docs/css/extra.css mkdocs.yml . git-revision-date-localized-plugin { color : red ; } extra_css : css/extra.css","title":"Apply custom styling"},{"location":"howto/custom-styling/#apply-custom-styling","text":"You can change the appearance of the revision dates by including extra CSS to your mkdocs site.","title":"Apply custom styling"},{"location":"howto/custom-styling/#css-classes","text":"To allow for easier styling date outputs are wrapped in <span> elements with the classes git-revision-date-localized-plugin and git-revision-date-localized-plugin-{type} , where {type} is replaced with the type set in the plugin settings (see options ). For example when type: datetime is set, using the following in a markdown file: Last update: {{ git_revision_date_localized }} Could output the following HTML: Last update: <span class=\"git-revision-date-localized-plugin git-revision-date-localized-plugin-datetime\">28 November, 2019 13:57:28</span>","title":"CSS Classes"},{"location":"howto/custom-styling/#customizing-a-class","text":"Making all revision dates red is as easy as: docs/css/extra.css mkdocs.yml . git-revision-date-localized-plugin { color : red ; } extra_css : css/extra.css","title":"Customizing a class"},{"location":"howto/override-a-theme/","text":"Customize a theme You can customize an existing theme by overriding blocks or partials. You might want to do this because your theme is not natively supported, or you would like more control on the formatting. Below are two examples to help get you started. Example: default mkdocs theme To add a revision date to the default mkdocs theme, add a overrides/partials folder to your docs folder and update your mkdocs.yml file. Then you can extend the base mkdocs theme by adding a new file docs/overrides/content.html : mkdocs.yml docs/overrides/content.html theme : name : mkdocs custom_dir : docs/overrides <!-- Overwrites content.html base mkdocs theme, taken from https://github.com/mkdocs/mkdocs/blob/master/mkdocs/themes/mkdocs/content.html --> {% if page.meta.source %} < div class = \"source-links\" > {% for filename in page.meta.source %} < span class = \"label label-primary\" > {{ filename }} </ span > {% endfor %} </ div > {% endif %} {{ page.content }} <!-- This section adds support for localized revision dates --> {% if page.meta.git_revision_date_localized %} < small > Last update: {{ page.meta.git_revision_date_localized }} </ small > {% endif %} {% if page.meta.git_created_date_localized %} < small > Created: {{ page.meta.git_created_date_localized }} </ small > {% endif %} Example: mkdocs-material theme mkdocs-material has built-in support for git_revision_date_localized and git_created_date_localized . You can see that when viewing their source-file.html partial. If you want, you can customize further by extending the mkdocs-material theme and overriding the source-file.html partial as follows: mkdocs.yml docs/overrides/partials/source-file.html theme : name : 'material' custom_dir : docs/overrides {% import \"partials/language.html\" as lang with context %} <!-- taken from https://github.com/squidfunk/mkdocs-material/blob/master/src/partials/source-file.html --> < hr /> < div class = \"md-source-file\" > < small > <!-- mkdocs-git-revision-date-localized-plugin --> {% if page.meta.git_revision_date_localized %} {{ lang.t(\"source.file.date.updated\") }}: {{ page.meta.git_revision_date_localized }} {% if page.meta.git_creation_date_localized %} < br /> {{ lang.t(\"source.file.date.created\") }}: {{ page.meta.git_creation_date_localized }} {% endif %} <!-- mkdocs-git-revision-date-plugin --> {% elif page.meta.revision_date %} {{ lang.t(\"source.file.date.updated\") }}: {{ page.meta.revision_date }} {% endif %} </ small > </ div >","title":"Customize a theme"},{"location":"howto/override-a-theme/#customize-a-theme","text":"You can customize an existing theme by overriding blocks or partials. You might want to do this because your theme is not natively supported, or you would like more control on the formatting. Below are two examples to help get you started.","title":"Customize a theme"},{"location":"howto/override-a-theme/#example-default-mkdocs-theme","text":"To add a revision date to the default mkdocs theme, add a overrides/partials folder to your docs folder and update your mkdocs.yml file. Then you can extend the base mkdocs theme by adding a new file docs/overrides/content.html : mkdocs.yml docs/overrides/content.html theme : name : mkdocs custom_dir : docs/overrides <!-- Overwrites content.html base mkdocs theme, taken from https://github.com/mkdocs/mkdocs/blob/master/mkdocs/themes/mkdocs/content.html --> {% if page.meta.source %} < div class = \"source-links\" > {% for filename in page.meta.source %} < span class = \"label label-primary\" > {{ filename }} </ span > {% endfor %} </ div > {% endif %} {{ page.content }} <!-- This section adds support for localized revision dates --> {% if page.meta.git_revision_date_localized %} < small > Last update: {{ page.meta.git_revision_date_localized }} </ small > {% endif %} {% if page.meta.git_created_date_localized %} < small > Created: {{ page.meta.git_created_date_localized }} </ small > {% endif %}","title":"Example: default mkdocs theme"},{"location":"howto/override-a-theme/#example-mkdocs-material-theme","text":"mkdocs-material has built-in support for git_revision_date_localized and git_created_date_localized . You can see that when viewing their source-file.html partial. If you want, you can customize further by extending the mkdocs-material theme and overriding the source-file.html partial as follows: mkdocs.yml docs/overrides/partials/source-file.html theme : name : 'material' custom_dir : docs/overrides {% import \"partials/language.html\" as lang with context %} <!-- taken from https://github.com/squidfunk/mkdocs-material/blob/master/src/partials/source-file.html --> < hr /> < div class = \"md-source-file\" > < small > <!-- mkdocs-git-revision-date-localized-plugin --> {% if page.meta.git_revision_date_localized %} {{ lang.t(\"source.file.date.updated\") }}: {{ page.meta.git_revision_date_localized }} {% if page.meta.git_creation_date_localized %} < br /> {{ lang.t(\"source.file.date.created\") }}: {{ page.meta.git_creation_date_localized }} {% endif %} <!-- mkdocs-git-revision-date-plugin --> {% elif page.meta.revision_date %} {{ lang.t(\"source.file.date.updated\") }}: {{ page.meta.revision_date }} {% endif %} </ small > </ div >","title":"Example: mkdocs-material theme"}]}